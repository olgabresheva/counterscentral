{"version":3,"sources":["Counter.js","CounterList.js","CounterRangeBtn.js","App.js","serviceWorker.js","index.js"],"names":["deletBtn","width","height","viewBox","className","fill","xmlns","d","fillRule","resetBtn","Counter","props","useState","btnHidden","setbtnHidden","hidden","onClick","decreaseCount","id","count","increaseCount","resetCount","deleteCount","CounterList","counters","map","el","key","CounterRangeBtn","customCount","rangeOfBtns","indexBtn","uuid","value","changeCountCustom","reverse","countCustom","resetCustomCount","deleteCustomCount","App","setCounters","setCountCustom","range","setRange","showRangeCounter","setShowRangeCounter","setRangeOfBtns","setIndexBtn","setCustomCount","num","Math","round","random","updatedCounters","push","aria-label","onChange","e","target","selected","type","newRange","i","updatedRangeOfBtns","setRangeBtn","filter","n","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9d94fba1.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst deletBtn = (<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-trash\" fill=\"currentColor\"\n                       xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n        d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\n    <path fillRule=\"evenodd\"\n          d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\n</svg>);\n\nconst resetBtn = (\n    <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-arrow-counterclockwise\" fill=\"currentColor\"\n         xmlns=\"http://www.w3.org/2000/svg\">\n        <path fillRule=\"evenodd\"\n              d=\"M12.83 6.706a5 5 0 0 0-7.103-3.16.5.5 0 1 1-.454-.892A6 6 0 1 1 2.545 5.5a.5.5 0 1 1 .91.417 5 5 0 1 0 9.375.789z\"/>\n        <path fillRule=\"evenodd\"\n              d=\"M7.854.146a.5.5 0 0 0-.708 0l-2.5 2.5a.5.5 0 0 0 0 .708l2.5 2.5a.5.5 0 1 0 .708-.708L5.707 3 7.854.854a.5.5 0 0 0 0-.708z\"/>\n    </svg>);\n\n\nfunction Counter(props) {\n\n    const [btnHidden, setbtnHidden] = useState(false);\n\n    const deleteCount = () => {\n        props.deleteCount(props.id);\n        setbtnHidden(true);\n    }\n\n    return (\n\n        <div className=\"Counter\">\n            <button className=\"btn btn-outline-secondary btn-sm\" hidden={btnHidden}\n                    onClick={() => props.decreaseCount(props.id)}>-\n            </button>\n            <span className=\"count\">{props.count}</span>\n            <button className=\"btn btn-outline-secondary btn-sm\" hidden={btnHidden}\n                    onClick={() => props.increaseCount(props.id)}>+\n            </button>\n            <button className=\"btn btn-outline-info btn-sm\" hidden={btnHidden}\n                    onClick={() => props.resetCount(props.id)}>{resetBtn}</button>\n            <button className=\"btn btn-outline-info btn-sm\" hidden={btnHidden} onClick={deleteCount}>{deletBtn}</button>\n\n        </div>\n    );\n}\n\nexport default Counter;\n","import React from 'react';\nimport './App.css';\nimport Counter from \"./Counter\";\n\nfunction CounterList(props) {\n\n    return (\n        <div className=\"CounterList\">\n            {props.counters.map(el =>\n                <Counter\n                    key={el.id}\n                    count={el.count}\n                    id={el.id}\n                    increaseCount={props.increaseCount}\n                    decreaseCount={props.decreaseCount}\n                    resetCount={props.resetCount}\n                    deleteCount={props.deleteCount}/>)}\n        </div>\n    );\n}\n\nexport default CounterList;\n","import React from 'react';\nimport './App.css';\nimport {uuid} from \"uuidv4\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction CounterRangeBtn(props) {\n\n    const resetBtn = (\n        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-arrow-counterclockwise\" fill=\"currentColor\"\n             xmlns=\"http://www.w3.org/2000/svg\">\n            <path fillRule=\"evenodd\"\n                  d=\"M12.83 6.706a5 5 0 0 0-7.103-3.16.5.5 0 1 1-.454-.892A6 6 0 1 1 2.545 5.5a.5.5 0 1 1 .91.417 5 5 0 1 0 9.375.789z\"/>\n            <path fillRule=\"evenodd\"\n                  d=\"M7.854.146a.5.5 0 0 0-.708 0l-2.5 2.5a.5.5 0 0 0 0 .708l2.5 2.5a.5.5 0 1 0 .708-.708L5.707 3 7.854.854a.5.5 0 0 0 0-.708z\"/>\n        </svg>);\n\n    const deletBtn = (<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-trash\" fill=\"currentColor\"\n                           xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\n        <path fillRule=\"evenodd\"\n              d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\n    </svg>);\n\n    return (\n\n        <div className=\"CounterRangeBtn\">\n            {props.customCount &&\n            <>\n                <hr/>\n                {props.rangeOfBtns[props.indexBtn].map(el => <button className=\"btn btn-outline-secondary btn-sm\"\n                                                                     key={uuid()}\n                                                                     value={el * -1}\n                                                                     onClick={() => props.changeCountCustom(el * -1)}>\n                    {el * -1}</button>).reverse()}\n                <span className=\"count\">{props.countCustom}</span>\n                {props.rangeOfBtns[props.indexBtn].map(el => <button className=\"btn btn-outline-secondary btn-sm\"\n                                                                     key={uuid()}\n                                                                     value={el}\n                                                                     onClick={() => props.changeCountCustom(el)}>{el}</button>)}\n                <button className=\"btn btn-outline-info btn-sm\" onClick={props.resetCustomCount}>{resetBtn}</button>\n                <button className=\"btn btn-outline-info btn-sm\" onClick={props.deleteCustomCount}>{deletBtn}</button>\n            </>}\n        </div>\n    );\n}\n\nexport default CounterRangeBtn;\n","import React, {useState} from 'react';\nimport './App.css';\nimport {uuid} from \"uuidv4\";\nimport CounterList from \"./CounterList\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport CounterRangeBtn from \"./CounterRangeBtn\";\n// import {Alert} from \"react-bootstrap\";\n\nfunction App() {\n\n    const [counters, setCounters] = useState([]);\n    const [countCustom, setCountCustom] = useState(0);\n\n    const randomCount = () => {\n        const num = Math.round(Math.random() * 10);\n        const updatedCounters = [...counters];\n        updatedCounters.push({id: uuid(), count: num});\n        setCounters(updatedCounters);\n    }\n\n    const increaseCount = (id) => {\n        const updatedCounters = counters.map(el => {\n            if (el.id === id) return ({...el, count: el.count + 1})\n            else return el\n        })\n        setCounters(updatedCounters);\n    }\n\n    const decreaseCount = (id) => {\n        const updatedCounters = counters.map(el => {\n            if (el.id === id) return ({...el, count: el.count - 1})\n            else return el\n        })\n        setCounters(updatedCounters);\n    }\n\n    const resetCount = (id) => {\n        const updatedCounters = counters.map(el => {\n            if (el.id === id) return ({...el, count: 0})\n            else return el\n        })\n        setCounters(updatedCounters);\n    }\n\n    const resetAll = () => {\n        const updatedCounters = [...counters];\n        updatedCounters.map(el => el.count = 0)\n        setCounters(updatedCounters);\n        setCountCustom(0);\n    }\n\n    const deleteCount = (id) => {\n        const updatedCounters = counters.filter(el => el.id !== id);\n        setCounters(updatedCounters);\n    }\n\n    const deleteAll = () => {\n        setCounters([]);\n        setShowRangeCounter(false);\n    }\n\n    const [range, setRange] = useState(0)\n    const [showRangeCounter, setShowRangeCounter] = useState(false);\n    const [rangeOfBtns, setRangeOfBtns] = useState([[]]);\n    const [indexBtn, setIndexBtn] = useState(0);\n    // const [disabledAddBtn, setDisabledAddbtn] = useState(true);\n    // const [showAlert, setShowAlert] = useState(false)\n\n    const setRangeEnableBtn = (e) => {\n        setRange(e.target.value);\n        // if (range > 0) {setDisabledAddbtn(false)}\n        // else setDisabledAddbtn(true)\n    }\n\n    const setRangeBtn = () => {\n        const newRange = [];\n        for (let i = 1; i <= range; i++) {\n            newRange.push(i)\n        }\n        const updatedRangeOfBtns = [...rangeOfBtns];\n        updatedRangeOfBtns.push(newRange);\n        setRangeOfBtns(updatedRangeOfBtns);\n    }\n\n    const addWithRange = () => {\n        setRangeBtn();\n        setShowRangeCounter(true);\n        setIndexBtn(indexBtn + 1);\n        setRange(0);\n        setCountCustom(0);\n        // setDisabledAddbtn(true);\n        setCustomCount(true);\n    }\n\n    const changeCountCustom = (n) => {\n        setCountCustom(countCustom + n);\n    }\n\n    const resetCustomCount = () => {\n        setCountCustom(0);\n    }\n\n    const [customCount, setCustomCount] = useState(true)\n\n    const deleteCustomCount = () => {\n        setCustomCount(false);\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-4\">\n                        <button className=\"btn btn-outline-info btn-sm\" onClick={randomCount}>Add Counter</button>\n                        <button className=\"btn btn-outline-secondary btn-sm\" onClick={resetAll}>Reset All</button>\n                        <button className=\"btn btn-outline-secondary btn-sm\" onClick={deleteAll}>Delete All</button>\n                    </div>\n                    <div className=\"col-md-4 offset-md-4\">\n                        {/*<div className=\"input-group mb-3 input-group-sm\">*/}\n                        {/*    <input type=\"number\" className=\"form-control\" placeholder=\"Add your range\"*/}\n                        {/*           value={range} onChange={setRangeEnableBtn}/>*/}\n                        {/*    <div className=\"input-group-append\">*/}\n                        {/*        <button className=\"btn btn-outline-info btn-sm\" type=\"button\"*/}\n                        {/*                id=\"button-addon2\" disabled={disabledAddBtn} onClick={addWithRange}>Add Counter*/}\n                        {/*            w/Range*/}\n                        {/*        </button>*/}\n                        {/*    </div>*/}\n                        {/*    /!*{showAlert && <Alert variant=\"secondary\">Please use positive values</Alert>}*!/*/}\n                        {/*</div>*/}\n                        <div className=\"input-group\">\n                            <select className=\"custom-select custom-select-sm\" id=\"inputGroupSelect04\"\n                                    aria-label=\"Example select with button addon\" value={range} onChange={setRangeEnableBtn}>\n                                <option selected>Choose your range</option>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                            </select>\n                            <div className=\"input-group-append\">\n                                <button className=\"btn btn-outline-info btn-sm\" type=\"button\" onClick={addWithRange}>Add Counter w/Range</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <CounterList counters={counters}\n                             increaseCount={increaseCount}\n                             decreaseCount={decreaseCount}\n                             resetCount={resetCount}\n                             deleteCount={deleteCount}\n                />\n                {showRangeCounter && <CounterRangeBtn\n                    rangeOfBtns={rangeOfBtns}\n                    countCustom={countCustom}\n                    changeCountCustom={changeCountCustom}\n                    indexBtn={indexBtn}\n                    resetCustomCount={resetCustomCount}\n                    customCount={customCount}\n                    deleteCustomCount={deleteCustomCount}\n                />}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}